import threading
import time
import numpy as np

class trainer_thread(threading.Thread):
    def __init__(self,trainer, runner_threads, train_epochs):
        self.trainer = trainer
        self.runner_threads = runner_threads
        self.train_epochs = train_epochs

    def run(self, _):
        self.running = True
        # current_idx       = [0 for _ in runners]
        # current_iteration = [1 for _ in runners] #These are for the non-primitive solution...
        all_data = []
        # while ( np.array(current_iteration) < self.train_epochs ).any():
        for r in self.runner_threads:
            '''PRIMITIVE SOLUTION!'''
            while r.running:
                pass
            '''
            DESIRABLE: start processing the first epoch on the samples
            generated by the runner, as they are coming in
            '''
        #     all_data += r.agent.get_train_data()
        # self.trainer.do_training(all_data, self.train_epochs)
        self.running = False

    def join(self):
        while self.running:
            pass

class runner_thread(threading.Thread):
    def __init__(self, id, env, agent):
        threading.Thread.__init__(self)
        self.id = id
        self.env = env
        self.agent = agent
        self.running = False
        self.current_player = 1

    def join(self):
        while self.running:
            pass

    def run(self, n_steps):
        self.running = True
        s = self.env.get_state()
        for t in range(n_steps):
            self.current_player = 1 - self.current_player
            _,a = self.agent.get_action(s, player=self.current_player)
            ds = self.env.perform_action(a)
            s = self.env.get_state()
            for i,d in enumerate(ds):
                if d: self.env.reset(env=[i])
        print("worker{} done".format(self.id))
        self.running = False

class threaded_runner:
    def __init__(self, envs=None, runners=None, trainer=None, train_epochs=3):
        self.threads = []
        runner_threads = []
        for i,ae in enumerate(zip(runners,envs)):
            a,e = ae
            thread = runner_thread(i, e, a)
            self.threads.append(thread)
            runner_threads.append(thread)
        self.threads.append(trainer_thread(trainer,runner_threads, train_epochs))

    def target(self, agent):
        for thread in self.threads:
            thread.agent = agent

    def run(self,n_steps):
        for thread in self.threads:
            thread.run(n_steps)

    def join_all_threads(self):
        for thread in self.threads:
            thread.join()

    def join(self):
        self.join_all_threads()
